Scenario: monitor outside thermometer temperature
Given: outside thermometer @therm
Evaluation: once a second, run arrow thermMonitorA(@therm)

arrow thermMonitorA [In: @therm, Out: (@time, @therm, @tempK)]
    @tempC <---- thermTemperatureA ----< @therm
    @tempK <---- toKelvinA         ----< @tempC
    @time  <---- getTimeA          ----< ()
    ()     <---- processReadingA   ----< (@time, @therm, @tempK)
    return (@time, @therm, @tempK)

arrow thermTemperatureA [In: @therm, Out: @tempC]
    @tempC <---- runScriptA ----< thermTemperatureS(@therm)
    return @tempC

arrow processReadingA [In: (@time, @therm, @tempK),  Out: ()]
    ()      <---- storeReadingA    ----< @reading
    @result <---- validateReadingA ----< @reading
    ()      <---- alarmOnFailA     ----< @result
    return ()
    
arrow storeReadingA [In: @reading, Out: ()]:
    () <---- runScriptA ----< storeReadingS(@reading)
    return ()

arrow validateReadingA [In: @reading, Out: @result]
    @result <---- runScriptA ----< validateReadingS(@reading)
    return @result

arrow alarmOnFailA [In: @result, Out: ()]
    () <---- runScriptA ----< alarmOnFailS(@result)
    return ()

script storeReadingS (@reading):
    <some script goes here>
    
script validateReadingS (@reading):
    <some script goes here>

script alarmOnFailS (@value):
    <some script goes here>
    
-------------------------------------------



thermMonitorA' :: FlowArr SensorInstance Reading
thermMonitorA' = proc sensorInst -> do
    tempK <- toKelvinA <<< thermTemperatureA -< sensorInst
    time  <- getTimeA -< ()
    
    let reading = (time, sensorInst, tempK)
    
    ()      <- storeReadingA    -< reading
    result  <- validateReadingA -< reading
    ()      <- alarmOnFailA     -< result
    returnA -< reading

    
thermMonitorA = 
      duplicateA                                  -- (inst, inst)
  >>> second (thermTemperatureA >>> toKelvinA)    -- (inst, tempK)
  >>> (arr $ \x -> ((), x))                       -- ((), (inst, tempK))
  >>> first getTimeA                              -- (time, (inst, tempK))
  >>> (arr $ \(t, (inst, m)) -> (t, inst, m))     -- (time, inst, tempK) = reading
  >>> duplicateA                                  -- (reading, reading)
  >>> second (storeReadingA &&& validateReadingA) -- (reading, ((), result))
  >>> second (second alarmOnFailA)                -- (reading, ((), ()))
  >>> takeFirstA
